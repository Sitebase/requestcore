{"class":{"name":"RequestCore","fileData":{"docBlock":{"section":[{"headline":"File","contents":"Handles all linear and parallel HTTP requests using cURL and manages the responses."},{"headline":"Version","contents":{"line":"2010.03.21"}},{"headline":"Copyright","contents":{"line":"2006-2010 Ryan Parman, Foleeo Inc., and contributors."}},{"headline":"License","contents":{"entry":{"param":"Simplified BSD License","description":"http:\/\/opensource.org\/licenses\/bsd-license.php"}}}]}},"summary":{"file":"requestcore.class.php","docBlock":{"section":{"headline":"Class","contents":{"line":"Container for all request-related methods."}}}},"constants":{"@attributes":{"count":"5"},"constant":[{"name":"HTTP_DELETE","value":"DELETE"},{"name":"HTTP_GET","value":"GET"},{"name":"HTTP_HEAD","value":"HEAD"},{"name":"HTTP_POST","value":"POST"},{"name":"HTTP_PUT","value":"PUT"}]},"properties":{"@attributes":{"count":"17"},"property":[{"name":"curl_handle","access":"public","documented":"true","description":{"line":"The handle for the cURL object."}},{"name":"curlopts","access":"public","documented":"true","description":{"line":"Custom CURLOPT settings."}},{"name":"method","access":"public","documented":"true","description":{"line":"The method by which the request is being made."}},{"name":"password","access":"public","documented":"true","description":{"line":"The password to use for the request."}},{"name":"proxy","access":"public","documented":"true","description":{"line":"Stores the proxy settings to use for the request."}},{"name":"request_body","access":"public","documented":"true","description":{"line":"The body being sent in the request."}},{"name":"request_class","defaultValue":{"@attributes":{"type":"string"}},"access":"public","documented":"true","description":{"line":"The default class to use for HTTP Requests (defaults to [RequestCore](..\/requestcore\/index.html))."}},{"name":"request_headers","access":"public","documented":"true","description":{"line":"The headers being sent in the request."}},{"name":"request_url","access":"public","documented":"true","description":{"line":"The URL being requested."}},{"name":"response","access":"public","documented":"true","description":{"line":"The response returned by the request."}},{"name":"response_body","access":"public","documented":"true","description":{"line":"The body returned by the request."}},{"name":"response_class","defaultValue":{"@attributes":{"type":"string"}},"access":"public","documented":"true","description":{"line":"The default class to use for HTTP Responses (defaults to [ResponseCore](..\/responsecore\/index.html))."}},{"name":"response_code","access":"public","documented":"true","description":{"line":"The HTTP status code returned by the request."}},{"name":"response_headers","access":"public","documented":"true","description":{"line":"The headers returned by the request."}},{"name":"response_info","access":"public","documented":"true","description":{"line":"Additional response data."}},{"name":"useragent","defaultValue":{"@attributes":{"type":"string"}},"access":"public","documented":"true","description":{"line":"Default useragent string to use."}},{"name":"username","access":"public","documented":"true","description":{"line":"The username to use for the request."}}]},"methods":{"@attributes":{"count":"17"},"method":[{"name":"__construct","parameters":{"parameter":[{"name":"url","required":"false","defaultValue":"null"},{"name":"proxy","required":"false","defaultValue":"null"},{"name":"helpers","required":"false","defaultValue":"null"}]},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"The constructor"},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":[{"param":"$url","type":"string","required":"Optional","description":"The URL to request or service endpoint to query."},{"param":"$proxy","type":"string","required":"Optional","description":"The faux-url to use for proxy settings. Takes the following format: `proxy:\/\/user:pass@hostname:port`"},{"param":"$helpers","type":"array","required":"Optional","description":"An associative array of classnames to use for request, and response functionality. Gets passed in automatically by the calling class."}]}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"187","endLine":"213","numberOfLines":"27","code":"public function __construct($url = null, $proxy = null, $helpers = null)\n{\n    \/\/ Set some default values.\n    $this-&gt;request_url = $url;\n    $this-&gt;method = $this::HTTP_GET;\n    $this-&gt;request_headers = array();\n    $this-&gt;request_body = '';\n\n    \/\/ Set a new Request class if one was set.\n    if (isset($helpers['request']) &amp;&amp; !empty($helpers['request']))\n    {\n        $this-&gt;request_class = $helpers['request'];\n    }\n\n    \/\/ Set a new Request class if one was set.\n    if (isset($helpers['response']) &amp;&amp; !empty($helpers['response']))\n    {\n        $this-&gt;response_class = $helpers['response'];\n    }\n\n    if ($proxy)\n    {\n        $this-&gt;set_proxy($proxy);\n    }\n\n    return $this;\n}\n"}},{"name":"add_header","parameters":{"parameter":[{"name":"key","required":"true"},{"name":"value","required":"true"}]},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Adds a custom HTTP header to the cURL request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":[{"param":"$key","type":"string","required":"Required","description":"The custom HTTP header to set."},{"param":"$value","type":"mixed","required":"Required","description":"The value to assign to the custom HTTP header."}]}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"254","endLine":"258","numberOfLines":"5","code":"public function add_header($key, $value)\n{\n    $this-&gt;request_headers[$key] = $value;\n    return $this;\n}\n"},"examples":{"example":{"title":"Add a custom header to the request (without firing it).","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;prep_request();\n$http-&gt;add_header('x-requestcore-header', 'value');\n\nvar_dump($http-&gt;request_headers);","result":"array(3) {\n  [\"Expect\"]=&gt;\n  string(12) \"100-continue\"\n  [\"Connection\"]=&gt;\n  string(5) \"close\"\n  [\"x-requestcore-header\"]=&gt;\n  string(5) \"value\"\n}"}}},{"name":"get_response_body","access":"public","docBlock":{"section":[{"headline":"Method","contents":"Get the HTTP response body from the request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Returns","contents":{"line":"_string_ The response body."}}]},"documented":"true","source":{"startLine":"698","endLine":"701","numberOfLines":"4","code":"public function get_response_body()\n{\n    return $this-&gt;response_body;\n}\n"},"examples":{"example":{"title":"Display the response body of the request.","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;send_request();\n\nvar_dump($http-&gt;get_response_body());","result":"string(48) \"abcdefghijklmnopqrstuvwxyz\n0123456789\n!@#$%^&amp;*()\""}}},{"name":"get_response_code","access":"public","docBlock":{"section":[{"headline":"Method","contents":"Get the HTTP response code from the request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Returns","contents":{"line":"_string_ The HTTP response code."}}]},"documented":"true","source":{"startLine":"713","endLine":"716","numberOfLines":"4","code":"public function get_response_code()\n{\n    return $this-&gt;response_code;\n}\n"},"examples":{"example":{"title":"Display the response code for the request.","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;send_request();\n\nvar_dump($http-&gt;get_response_code());","result":"int(200)"}}},{"name":"get_response_header","parameters":{"parameter":{"name":"header","required":"false","defaultValue":"null"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Get the HTTP response headers from the request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$header","type":"string","required":"Optional","description":"A specific header value to return. Defaults to all headers."}}},{"headline":"Returns","contents":{"line":"_string_|_array_ All or selected header values."}}]},"documented":"true","source":{"startLine":"679","endLine":"686","numberOfLines":"8","code":"public function get_response_header($header = null)\n{\n    if ($header)\n    {\n        return $this-&gt;response_headers[strtolower($header)];\n    }\n    return $this-&gt;response_headers;\n}\n"},"examples":{"example":[{"title":"Display the Content-Type header of the response.","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;send_request();\n\nvar_dump($http-&gt;get_response_header('content-type'));","result":"string(25) \"text\/plain; charset=utf-8\""},{"title":"Display the URL that was requested.","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;send_request();\n$info = $http-&gt;get_response_header('_info');\n\nvar_dump($info['url']);","result":"string(71) \"http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt\""}]}},{"name":"prep_request","access":"public","docBlock":{"section":[{"headline":"Method","contents":"Prepares and adds the details of the cURL request. This can be passed along to a `curl_multi_exec()` function."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Returns","contents":{"line":"The handle for the cURL object."}}]},"documented":"true","source":{"startLine":"414","endLine":"512","numberOfLines":"99","code":"public function prep_request()\n{\n    $this-&gt;add_header('Expect', '100-continue');\n    $this-&gt;add_header('Connection', 'close');\n\n    $curl_handle = curl_init();\n\n    \/\/ Set default options.\n    curl_setopt($curl_handle, CURLOPT_URL, $this-&gt;request_url);\n    curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n    curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n    curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n    curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n    curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n    curl_setopt($curl_handle, CURLOPT_HEADER, true);\n    curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n    curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n    curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n    curl_setopt($curl_handle, CURLOPT_REFERER, $this-&gt;request_url);\n    curl_setopt($curl_handle, CURLOPT_USERAGENT, $this-&gt;useragent);\n\n    \/\/ Merge in the CURLOPTs\n    if (isset($this-&gt;curlopts) &amp;&amp; sizeof($this-&gt;curlopts) &gt; 0)\n    {\n        foreach ($this-&gt;curlopts as $k =&gt; $v)\n        {\n            curl_setopt($curl_handle, $k, $v);\n        }\n    }\n\n    \/\/ Enable a proxy connection if requested.\n    if ($this-&gt;proxy)\n    {\n        curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n\n        $host = $this-&gt;proxy['host'];\n        $host .= ($this-&gt;proxy['port']) ? ':' . $this-&gt;proxy['port'] : '';\n        curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n\n        if (isset($this-&gt;proxy['user']) &amp;&amp; isset($this-&gt;proxy['pass']))\n        {\n            curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this-&gt;proxy['user'] . ':' . $this-&gt;proxy['pass']);\n        }\n    }\n\n    \/\/ Set credentials for HTTP Basic\/Digest Authentication.\n    if ($this-&gt;username &amp;&amp; $this-&gt;password)\n    {\n        curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n        curl_setopt($curl_handle, CURLOPT_USERPWD, $this-&gt;username . ':' . $this-&gt;password);\n    }\n\n    \/\/ Handle the encoding if we can.\n    if (extension_loaded('zlib'))\n    {\n        curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n    }\n\n    \/\/ Process custom headers\n    if (isset($this-&gt;request_headers) &amp;&amp; count($this-&gt;request_headers))\n    {\n        $temp_headers = array();\n\n        foreach ($this-&gt;request_headers as $k =&gt; $v)\n        {\n            $temp_headers[] = $k . ': ' . $v;\n        }\n\n        curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n    }\n\n    switch ($this-&gt;method)\n    {\n        case $this::HTTP_PUT:\n            curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this-&gt;request_body);\n            break;\n\n        case $this::HTTP_POST:\n            curl_setopt($curl_handle, CURLOPT_POST, true);\n            curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this-&gt;request_body);\n            break;\n\n        case $this::HTTP_HEAD:\n            curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this::HTTP_HEAD);\n            curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n            break;\n\n        default:\n            curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this-&gt;method);\n            curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this-&gt;request_body);\n            break;\n    }\n\n    return $curl_handle;\n}\n"}},{"name":"process_response","parameters":{"parameter":[{"name":"curl_handle","required":"false","defaultValue":"null"},{"name":"response","required":"false","defaultValue":"null"}]},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Take the post-processed cURL data and break it down into useful header\/body\/info chunks. Uses the data stored in the [curl_handle](..\/requestcore\/properties.html#curl_handle) and [response](..\/requestcore\/properties.html#response) properties unless replacement data is passed in via parameters."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":[{"param":"$curl_handle","type":"string","required":"Optional","description":"The reference to the already executed cURL request."},{"param":"$response","type":"string","required":"Optional","description":"The actual response content itself that needs to be parsed."}]}},{"headline":"Returns","contents":{"line":"[ResponseCore](..\/responsecore\/index.html) object"}}]},"documented":"true","source":{"startLine":"528","endLine":"574","numberOfLines":"47","code":"public function process_response($curl_handle = null, $response = null)\n{\n    \/\/ Accept a custom one if it's passed.\n    if ($curl_handle &amp;&amp; $response)\n    {\n        $this-&gt;curl_handle = $curl_handle;\n        $this-&gt;response = $response;\n    }\n\n    \/\/ As long as this came back as a valid resource...\n    if (is_resource($this-&gt;curl_handle))\n    {\n        \/\/ Determine what's what.\n        $header_size = curl_getinfo($this-&gt;curl_handle, CURLINFO_HEADER_SIZE);\n        $this-&gt;response_headers = substr($this-&gt;response, 0, $header_size);\n        $this-&gt;response_body = substr($this-&gt;response, $header_size);\n        $this-&gt;response_code = curl_getinfo($this-&gt;curl_handle, CURLINFO_HTTP_CODE);\n        $this-&gt;response_info = curl_getinfo($this-&gt;curl_handle);\n\n        \/\/ Parse out the headers\n        $this-&gt;response_headers = explode(&quot;\\r\\n\\r\\n&quot;, trim($this-&gt;response_headers));\n        $this-&gt;response_headers = array_pop($this-&gt;response_headers);\n        $this-&gt;response_headers = explode(&quot;\\r\\n&quot;, $this-&gt;response_headers);\n        array_shift($this-&gt;response_headers);\n\n        \/\/ Loop through and split up the headers.\n        $header_assoc = array();\n        foreach ($this-&gt;response_headers as $header)\n        {\n            $kv = explode(': ', $header);\n            $header_assoc[strtolower($kv[0])] = $kv[1];\n        }\n\n        \/\/ Reset the headers to the appropriate property.\n        $this-&gt;response_headers = $header_assoc;\n        $this-&gt;response_headers['_info'] = $this-&gt;response_info;\n        $this-&gt;response_headers['_info']['method'] = $this-&gt;method;\n\n        if ($curl_handle &amp;&amp; $response)\n        {\n            return new $this-&gt;response_class($this-&gt;response_headers, $this-&gt;response_body, $this-&gt;response_code);\n        }\n    }\n\n    \/\/ Return false\n    return false;\n}\n"}},{"name":"remove_header","parameters":{"parameter":{"name":"key","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Removes an HTTP header from the cURL request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$key","type":"string","required":"Required","description":"The custom HTTP header to set."}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"273","endLine":"280","numberOfLines":"8","code":"public function remove_header($key)\n{\n    if (isset($this-&gt;request_headers[$key]))\n    {\n        unset($this-&gt;request_headers[$key]);\n    }\n    return $this;\n}\n"},"examples":{"example":{"title":"Add a custom header to the request, then remove it (without firing it).","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;prep_request();\n\n$http-&gt;add_header('x-requestcore-header', 'value');\n$http-&gt;remove_header('x-requestcore-header');\n\nvar_dump($http-&gt;request_headers);","result":"array(2) {\n  [\"Expect\"]=&gt;\n  string(12) \"100-continue\"\n  [\"Connection\"]=&gt;\n  string(5) \"close\"\n}"}}},{"name":"send_multi_request","parameters":{"parameter":{"name":"handles","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Sends the request using curl_multi_exec(), enabling parallel requests."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$handles","type":"array","required":"Required","description":"An indexed array of cURL handles to process simultaneously."}}},{"headline":"Returns","contents":{"line":"_array_ Post-processed cURL responses."}}]},"documented":"true","source":{"startLine":"618","endLine":"660","numberOfLines":"43","code":"public function send_multi_request($handles)\n{\n    \/\/ Initialize MultiCURL\n    $multi_handle = curl_multi_init();\n\n    \/\/ Loop through each of the CURL handles and add them to the MultiCURL request.\n    foreach ($handles as $handle)\n    {\n        curl_multi_add_handle($multi_handle, $handle);\n    }\n\n    $count = 0;\n\n    \/\/ Execute\n    do\n    {\n        $status = curl_multi_exec($multi_handle, $active);\n    }\n    while ($status == CURLM_CALL_MULTI_PERFORM || $active);\n\n    \/\/ Define this.\n    $handles_post = array();\n\n    \/\/ Retrieve each handle response\n    foreach ($handles as $handle)\n    {\n        if (curl_errno($handle) == CURLE_OK)\n        {\n            $http = new $this-&gt;request_class(null);\n            $handles_post[] = $http-&gt;process_response($handle, curl_multi_getcontent($handle));\n        }\n        else\n        {\n            throw new RequestCore_Exception(curl_error($handle));\n        }\n\n        \/\/ Explicitly close each cURL handle.\n        curl_multi_remove_handle($multi_handle, $handle);\n        curl_close($handle);\n    }\n\n    return $handles_post;\n}\n"},"examples":{"example":{"title":"Collect cURL handles for two requests, fire them, then display the response bodies.","code":"$http = new RequestCore();\n\n$responses = $http-&gt;send_multi_request(array(\n\t$http-&gt;set_request_url('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt')-&gt;prep_request(),\n\t$http-&gt;set_request_url('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request2.txt')-&gt;prep_request()\n));\n\n$bodies = array(\n\t$responses[0]-&gt;body,\n\t$responses[1]-&gt;body,\n);\n\nvar_dump($bodies);","result":"array(2) {\n  [0]=&gt;\n  string(48) \"abcdefghijklmnopqrstuvwxyz\n0123456789\n!@#$%^&amp;*()\"\n  [1]=&gt;\n  string(48) \")(*&amp;^%$#@!\n9876543210\nzyxwvutsrqponmljkihgfedcba\"\n}"}}},{"name":"send_request","parameters":{"parameter":{"name":"parse","required":"false","defaultValue":"false"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Sends the request, calling necessary utility functions to update built-in properties."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$parse","type":"boolean","required":"Optional","description":"Whether to parse the response with ResponseCore or not."}}},{"headline":"Returns","contents":{"line":"_string_ The resulting unparsed data from the request."}}]},"documented":"true","source":{"startLine":"589","endLine":"603","numberOfLines":"15","code":"public function send_request($parse = false)\n{\n    $curl_handle = $this-&gt;prep_request();\n    $this-&gt;response = curl_exec($curl_handle);\n    $parsed_response = $this-&gt;process_response($curl_handle, $this-&gt;response);\n\n    curl_close($curl_handle);\n\n    if ($parse)\n    {\n        return $parsed_response;\n    }\n\n    return $this-&gt;response;\n}\n"},"examples":{"example":[{"title":"Send the request, parse it with ResponseCore, and display only the body.","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$response = $http-&gt;send_request(true);\n\nvar_dump($response-&gt;body);","result":"string(48) \"abcdefghijklmnopqrstuvwxyz\n0123456789\n!@#$%^&amp;*()\""},{"title":"Set the URL via set_request_url() instead of the constructor, send the request, parse it with ResponseCore, and display only the body.","code":"$http = new RequestCore();\n\n$http-&gt;set_request_url('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$response = $http-&gt;send_request(true);\n\nvar_dump($response-&gt;body);","result":"string(48) \"abcdefghijklmnopqrstuvwxyz\n0123456789\n!@#$%^&amp;*()\""},{"title":"Send a HEAD request instead of a GET request, and display the response's Content-Type and non-body (since this is a HEAD request).","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;set_method($http::HTTP_HEAD);\n$response = $http-&gt;send_request(true);\n\nvar_dump($response-&gt;header['content-type']);\nvar_dump($response-&gt;body);","result":"string(25) \"text\/plain; charset=utf-8\"\nbool(false)"}]}},{"name":"set_body","parameters":{"parameter":{"name":"body","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Set the body to send in the request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$body","type":"string","required":"Required","description":"The textual content to send along in the body of the request."}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"333","endLine":"337","numberOfLines":"5","code":"public function set_body($body)\n{\n    $this-&gt;request_body = $body;\n    return $this;\n}\n"}},{"name":"set_credentials","parameters":{"parameter":[{"name":"user","required":"true"},{"name":"pass","required":"true"}]},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Sets the credentials to use for authentication."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":[{"param":"$user","type":"string","required":"Required","description":"The username to authenticate with."},{"param":"$pass","type":"string","required":"Required","description":"The password to authenticate with."}]}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"233","endLine":"238","numberOfLines":"6","code":"public function set_credentials($user, $pass)\n{\n    $this-&gt;username = $user;\n    $this-&gt;password = $pass;\n    return $this;\n}\n"},"examples":{"example":[{"title":"Pass credentials to set_credentials(), and display the username to use.","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;set_credentials('user', 'pass');\n$http-&gt;prep_request();\nvar_dump($http-&gt;username);","result":"string(4) \"user\""},{"title":"Pass credentials to set_credentials(), and display the password to use.","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;set_credentials('user', 'pass');\n$http-&gt;prep_request();\nvar_dump($http-&gt;password);","result":"string(4) \"pass\""}]}},{"name":"set_curlopts","parameters":{"parameter":{"name":"curlopts","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Set additional CURLOPT settings. These will merge with the default settings, and override if there is a duplicate."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$curlopts","type":"array","required":"Optional","description":"A set of key-value pairs that set `CURLOPT` options. These will merge with the existing CURLOPTs, and ones passed here will override the defaults. Keys should be the `CURLOPT_` constants, not strings."}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"371","endLine":"375","numberOfLines":"5","code":"public function set_curlopts($curlopts)\n{\n    $this-&gt;curlopts = $curlopts;\n    return $this;\n}\n"}},{"name":"set_method","parameters":{"parameter":{"name":"method","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Set the method type for the request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$method","type":"string","required":"Required","description":"One of the following constants: [HTTP_GET](..\/requestcore\/constants.html#HTTP_GET), [HTTP_POST](..\/requestcore\/constants.html#HTTP_POST), [HTTP_PUT](..\/requestcore\/constants.html#HTTP_PUT), [HTTP_HEAD](..\/requestcore\/constants.html#HTTP_HEAD), [HTTP_DELETE](..\/requestcore\/constants.html#HTTP_DELETE)."}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"295","endLine":"299","numberOfLines":"5","code":"public function set_method($method)\n{\n    $this-&gt;method = strtoupper($method);\n    return $this;\n}\n"}},{"name":"set_proxy","parameters":{"parameter":{"name":"proxy","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Set the proxy to use for making requests."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$proxy","type":"string","required":"Optional","description":"The faux-url to use for proxy settings. Takes the following format: `proxy:\/\/user:pass@hostname:port`"}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"390","endLine":"398","numberOfLines":"9","code":"public function set_proxy($proxy)\n{\n    $proxy = parse_url($proxy);\n    $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n    $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n    $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n    $this-&gt;proxy = $proxy;\n    return $this;\n}\n"},"examples":{"example":{"title":"Pass in a proxy DSN string, and process it with prep_request() (without firing the request).","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;set_proxy('proxy:\/\/user:pass@hostname:80');\n$http-&gt;prep_request();\n\nvar_dump($http-&gt;proxy);","result":"array(5) {\n  [\"scheme\"]=&gt;\n  string(5) \"proxy\"\n  [\"host\"]=&gt;\n  string(8) \"hostname\"\n  [\"port\"]=&gt;\n  int(80)\n  [\"user\"]=&gt;\n  string(4) \"user\"\n  [\"pass\"]=&gt;\n  string(4) \"pass\"\n}"}}},{"name":"set_request_url","parameters":{"parameter":{"name":"url","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Set the URL to make the request to."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$url","type":"string","required":"Required","description":"The URL to make the request to."}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"352","endLine":"356","numberOfLines":"5","code":"public function set_request_url($url)\n{\n    $this-&gt;request_url = $url;\n    return $this;\n}\n"},"examples":{"example":{"title":"Send a request and display the URL we requested.","code":"$http = new RequestCore();\n$http-&gt;set_request_url('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;send_request();\n\nvar_dump($http-&gt;response_info['url']);","result":"string(71) \"http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt\""}}},{"name":"set_useragent","parameters":{"parameter":{"name":"ua","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Sets a custom useragent string for the class."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$ua","type":"string","required":"Required","description":"The useragent string to use."}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"314","endLine":"318","numberOfLines":"5","code":"public function set_useragent($ua)\n{\n    $this-&gt;useragent = $ua;\n    return $this;\n}\n"},"examples":{"example":{"title":"Set a useragent string to use for HTTP requests.","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;set_useragent('SampleUserAgentString');\n\nvar_dump($http-&gt;useragent);","result":"string(21) \"SampleUserAgentString\""}}}]}}}