{"class":{"name":"RequestCore","fileData":{"docBlock":{"section":[{"headline":"File","contents":"Handles all linear and parallel HTTP requests using cURL and manages the responses."},{"headline":"Version","contents":{"line":"2010.03.21"}},{"headline":"Copyright","contents":{"line":"2006-2010 Ryan Parman, Foleeo Inc., and contributors."}},{"headline":"License","contents":{"entry":{"param":"Simplified BSD License","description":"http:\/\/opensource.org\/licenses\/bsd-license.php"}}}]}},"summary":{"file":"requestcore.class.php","docBlock":{"section":{"headline":"Class","contents":{"line":"Container for all request-related methods."}}}},"constants":{"@attributes":{"count":"5"},"constant":[{"name":"HTTP_GET","value":"GET"},{"name":"HTTP_POST","value":"POST"},{"name":"HTTP_PUT","value":"PUT"},{"name":"HTTP_DELETE","value":"DELETE"},{"name":"HTTP_HEAD","value":"HEAD"}]},"properties":{"@attributes":{"count":"17"},"property":[{"name":"curl_handle","access":"public","documented":"true","description":{"line":"The handle for the cURL object."}},{"name":"curlopts","access":"public","documented":"true","description":{"line":"Custom CURLOPT settings."}},{"name":"method","access":"public","documented":"true","description":{"line":"The method by which the request is being made."}},{"name":"password","access":"public","documented":"true","description":{"line":"The password to use for the request."}},{"name":"proxy","access":"public","documented":"true","description":{"line":"Stores the proxy settings to use for the request."}},{"name":"request_body","access":"public","documented":"true","description":{"line":"The body being sent in the request."}},{"name":"request_class","defaultValue":"RequestCore","access":"public","documented":"true","description":{"line":"The default class to use for HTTP Requests (defaults to <RequestCore>)."}},{"name":"request_headers","access":"public","documented":"true","description":{"line":"The headers being sent in the request."}},{"name":"request_url","access":"public","documented":"true","description":{"line":"The URL being requested."}},{"name":"response","access":"public","documented":"true","description":{"line":"The response returned by the request."}},{"name":"response_body","access":"public","documented":"true","description":{"line":"The body returned by the request."}},{"name":"response_class","defaultValue":"ResponseCore","access":"public","documented":"true","description":{"line":"The default class to use for HTTP Responses (defaults to <ResponseCore>)."}},{"name":"response_code","access":"public","documented":"true","description":{"line":"The HTTP status code returned by the request."}},{"name":"response_headers","access":"public","documented":"true","description":{"line":"The headers returned by the request."}},{"name":"response_info","access":"public","documented":"true","description":{"line":"Additional response data."}},{"name":"useragent","defaultValue":"RequestCore\/1.1","access":"public","documented":"true","description":{"line":"Default useragent string to use."}},{"name":"username","access":"public","documented":"true","description":{"line":"The username to use for the request."}}]},"methods":{"@attributes":{"count":"17"},"method":[{"name":"__construct","parameters":{"parameter":[{"name":"url","required":"false","defaultValue":"null"},{"name":"proxy","required":"false","defaultValue":"null"},{"name":"helpers","required":"false","defaultValue":"null"}]},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"The constructor"},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":[{"param":"$url","type":"string","required":"Optional","description":"The URL to request or service endpoint to query."},{"param":"$proxy","type":"string","required":"Optional","description":"The faux-url to use for proxy settings. Takes the following format: `proxy:\/\/user:pass@hostname:port`"},{"param":"$helpers","type":"array","required":"Optional","description":"An associative array of classnames to use for request, and response functionality. Gets passed in automatically by the calling class."}]}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"187","endLine":"213","code":"\tpublic function __construct($url = null, $proxy = null, $helpers = null)\n\t{\n\t\t\/\/ Set some default values.\n\t\t$this->request_url = $url;\n\t\t$this->method = $this::HTTP_GET;\n\t\t$this->request_headers = array();\n\t\t$this->request_body = '';\n\n\t\t\/\/ Set a new Request class if one was set.\n\t\tif (isset($helpers['request']) && !empty($helpers['request']))\n\t\t{\n\t\t\t$this->request_class = $helpers['request'];\n\t\t}\n\n\t\t\/\/ Set a new Request class if one was set.\n\t\tif (isset($helpers['response']) && !empty($helpers['response']))\n\t\t{\n\t\t\t$this->response_class = $helpers['response'];\n\t\t}\n\n\t\tif ($proxy)\n\t\t{\n\t\t\t$this->set_proxy($proxy);\n\t\t}\n\n\t\treturn $this;\n\t}\n"}},{"name":"add_header","parameters":{"parameter":[{"name":"key","required":"true"},{"name":"value","required":"true"}]},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Adds a custom HTTP header to the cURL request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":[{"param":"$key","type":"string","required":"Required","description":"The custom HTTP header to set."},{"param":"$value","type":"mixed","required":"Required","description":"The value to assign to the custom HTTP header."}]}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"254","endLine":"258","code":"\tpublic function add_header($key, $value)\n\t{\n\t\t$this->request_headers[$key] = $value;\n\t\treturn $this;\n\t}\n"}},{"name":"get_response_body","access":"public","docBlock":{"section":[{"headline":"Method","contents":"Get the HTTP response body from the request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Returns","contents":{"line":"_string_ The response body."}}]},"documented":"true","source":{"startLine":"698","endLine":"701","code":"\tpublic function get_response_body()\n\t{\n\t\treturn $this->response_body;\n\t}\n"}},{"name":"get_response_code","access":"public","docBlock":{"section":[{"headline":"Method","contents":"Get the HTTP response code from the request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Returns","contents":{"line":"_string_ The HTTP response code."}}]},"documented":"true","source":{"startLine":"713","endLine":"716","code":"\tpublic function get_response_code()\n\t{\n\t\treturn $this->response_code;\n\t}\n"}},{"name":"get_response_header","parameters":{"parameter":{"name":"header","required":"false","defaultValue":"null"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Get the HTTP response headers from the request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$header","type":"string","required":"Optional","description":"A specific header value to return. Defaults to all headers."}}},{"headline":"Returns","contents":{"line":"_string_|_array_ All or selected header values."}}]},"documented":"true","source":{"startLine":"679","endLine":"686","code":"\tpublic function get_response_header($header = null)\n\t{\n\t\tif ($header)\n\t\t{\n\t\t\treturn $this->response_headers[strtolower($header)];\n\t\t}\n\t\treturn $this->response_headers;\n\t}\n"}},{"name":"prep_request","access":"public","docBlock":{"section":[{"headline":"Method","contents":"Prepares and adds the details of the cURL request. This can be passed along to a `curl_multi_exec()` function."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Returns","contents":{"line":"The handle for the cURL object."}}]},"documented":"true","source":{"startLine":"414","endLine":"512","code":"\tpublic function prep_request()\n\t{\n\t\t$this->add_header('Expect', '100-continue');\n\t\t$this->add_header('Connection', 'close');\n\n\t\t$curl_handle = curl_init();\n\n\t\t\/\/ Set default options.\n\t\tcurl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n\t\tcurl_setopt($curl_handle, CURLOPT_FILETIME, true);\n\t\tcurl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n\t\tcurl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n\t\tcurl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n\t\tcurl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n\t\tcurl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, true);\n\t\tcurl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n\t\tcurl_setopt($curl_handle, CURLOPT_HEADER, true);\n\t\tcurl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n\t\tcurl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n\t\tcurl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n\t\tcurl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n\t\tcurl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n\t\tcurl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n\n\t\t\/\/ Merge in the CURLOPTs\n\t\tif (isset($this->curlopts) && sizeof($this->curlopts) > 0)\n\t\t{\n\t\t\tforeach ($this->curlopts as $k => $v)\n\t\t\t{\n\t\t\t\tcurl_setopt($curl_handle, $k, $v);\n\t\t\t}\n\t\t}\n\n\t\t\/\/ Enable a proxy connection if requested.\n\t\tif ($this->proxy)\n\t\t{\n\t\t\tcurl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n\n\t\t\t$host = $this->proxy['host'];\n\t\t\t$host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n\t\t\tcurl_setopt($curl_handle, CURLOPT_PROXY, $host);\n\n\t\t\tif (isset($this->proxy['user']) && isset($this->proxy['pass']))\n\t\t\t{\n\t\t\t\tcurl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n\t\t\t}\n\t\t}\n\n\t\t\/\/ Set credentials for HTTP Basic\/Digest Authentication.\n\t\tif ($this->username && $this->password)\n\t\t{\n\t\t\tcurl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n\t\t\tcurl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n\t\t}\n\n\t\t\/\/ Handle the encoding if we can.\n\t\tif (extension_loaded('zlib'))\n\t\t{\n\t\t\tcurl_setopt($curl_handle, CURLOPT_ENCODING, '');\n\t\t}\n\n\t\t\/\/ Process custom headers\n\t\tif (isset($this->request_headers) && count($this->request_headers))\n\t\t{\n\t\t\t$temp_headers = array();\n\n\t\t\tforeach ($this->request_headers as $k => $v)\n\t\t\t{\n\t\t\t\t$temp_headers[] = $k . ': ' . $v;\n\t\t\t}\n\n\t\t\tcurl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n\t\t}\n\n\t\tswitch ($this->method)\n\t\t{\n\t\t\tcase $this::HTTP_PUT:\n\t\t\t\tcurl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n\t\t\t\tcurl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n\t\t\t\tbreak;\n\n\t\t\tcase $this::HTTP_POST:\n\t\t\t\tcurl_setopt($curl_handle, CURLOPT_POST, true);\n\t\t\t\tcurl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n\t\t\t\tbreak;\n\n\t\t\tcase $this::HTTP_HEAD:\n\t\t\t\tcurl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this::HTTP_HEAD);\n\t\t\t\tcurl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tcurl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n\t\t\t\tcurl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $curl_handle;\n\t}\n"}},{"name":"process_response","parameters":{"parameter":[{"name":"curl_handle","required":"false","defaultValue":"null"},{"name":"response","required":"false","defaultValue":"null"}]},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Take the post-processed cURL data and break it down into useful header\/body\/info chunks. Uses the data stored in the <curl_handle> and <response> properties unless replacement data is passed in via parameters."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":[{"param":"$curl_handle","type":"string","required":"Optional","description":"The reference to the already executed cURL request."},{"param":"$response","type":"string","required":"Optional","description":"The actual response content itself that needs to be parsed."}]}},{"headline":"Returns","contents":{"line":"<ResponseCore> object"}}]},"documented":"true","source":{"startLine":"528","endLine":"574","code":"\tpublic function process_response($curl_handle = null, $response = null)\n\t{\n\t\t\/\/ Accept a custom one if it's passed.\n\t\tif ($curl_handle && $response)\n\t\t{\n\t\t\t$this->curl_handle = $curl_handle;\n\t\t\t$this->response = $response;\n\t\t}\n\n\t\t\/\/ As long as this came back as a valid resource...\n\t\tif (is_resource($this->curl_handle))\n\t\t{\n\t\t\t\/\/ Determine what's what.\n\t\t\t$header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n\t\t\t$this->response_headers = substr($this->response, 0, $header_size);\n\t\t\t$this->response_body = substr($this->response, $header_size);\n\t\t\t$this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n\t\t\t$this->response_info = curl_getinfo($this->curl_handle);\n\n\t\t\t\/\/ Parse out the headers\n\t\t\t$this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n\t\t\t$this->response_headers = array_pop($this->response_headers);\n\t\t\t$this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n\t\t\tarray_shift($this->response_headers);\n\n\t\t\t\/\/ Loop through and split up the headers.\n\t\t\t$header_assoc = array();\n\t\t\tforeach ($this->response_headers as $header)\n\t\t\t{\n\t\t\t\t$kv = explode(': ', $header);\n\t\t\t\t$header_assoc[strtolower($kv[0])] = $kv[1];\n\t\t\t}\n\n\t\t\t\/\/ Reset the headers to the appropriate property.\n\t\t\t$this->response_headers = $header_assoc;\n\t\t\t$this->response_headers['_info'] = $this->response_info;\n\t\t\t$this->response_headers['_info']['method'] = $this->method;\n\n\t\t\tif ($curl_handle && $response)\n\t\t\t{\n\t\t\t\treturn new $this->response_class($this->response_headers, $this->response_body, $this->response_code);\n\t\t\t}\n\t\t}\n\n\t\t\/\/ Return false\n\t\treturn false;\n\t}\n"}},{"name":"remove_header","parameters":{"parameter":{"name":"key","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Removes an HTTP header from the cURL request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$key","type":"string","required":"Required","description":"The custom HTTP header to set."}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"273","endLine":"280","code":"\tpublic function remove_header($key)\n\t{\n\t\tif (isset($this->request_headers[$key]))\n\t\t{\n\t\t\tunset($this->request_headers[$key]);\n\t\t}\n\t\treturn $this;\n\t}\n"}},{"name":"send_multi_request","parameters":{"parameter":{"name":"handles","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Sends the request using curl_multi_exec(), enabling parallel requests."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$handles","type":"array","required":"Required","description":"An indexed array of cURL handles to process simultaneously."}}},{"headline":"Returns","contents":{"line":"_array_ Post-processed cURL responses."}}]},"documented":"true","source":{"startLine":"618","endLine":"660","code":"\tpublic function send_multi_request($handles)\n\t{\n\t\t\/\/ Initialize MultiCURL\n\t\t$multi_handle = curl_multi_init();\n\n\t\t\/\/ Loop through each of the CURL handles and add them to the MultiCURL request.\n\t\tforeach ($handles as $handle)\n\t\t{\n\t\t\tcurl_multi_add_handle($multi_handle, $handle);\n\t\t}\n\n\t\t$count = 0;\n\n\t\t\/\/ Execute\n\t\tdo\n\t\t{\n\t\t\t$status = curl_multi_exec($multi_handle, $active);\n\t\t}\n\t\twhile ($status == CURLM_CALL_MULTI_PERFORM || $active);\n\n\t\t\/\/ Define this.\n\t\t$handles_post = array();\n\n\t\t\/\/ Retrieve each handle response\n\t\tforeach ($handles as $handle)\n\t\t{\n\t\t\tif (curl_errno($handle) == CURLE_OK)\n\t\t\t{\n\t\t\t\t$http = new $this->request_class(null);\n\t\t\t\t$handles_post[] = $http->process_response($handle, curl_multi_getcontent($handle));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new RequestCore_Exception(curl_error($handle));\n\t\t\t}\n\n\t\t\t\/\/ Explicitly close each cURL handle.\n\t\t\tcurl_multi_remove_handle($multi_handle, $handle);\n\t\t\tcurl_close($handle);\n\t\t}\n\n\t\treturn $handles_post;\n\t}\n"}},{"name":"send_request","parameters":{"parameter":{"name":"parse","required":"false","defaultValue":"false"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Sends the request, calling necessary utility functions to update built-in properties."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$parse","type":"boolean","required":"Optional","description":"Whether to parse the response with ResponseCore or not."}}},{"headline":"Returns","contents":{"line":"_string_ The resulting unparsed data from the request."}}]},"documented":"true","source":{"startLine":"589","endLine":"603","code":"\tpublic function send_request($parse = false)\n\t{\n\t\t$curl_handle = $this->prep_request();\n\t\t$this->response = curl_exec($curl_handle);\n\t\t$parsed_response = $this->process_response($curl_handle, $this->response);\n\n\t\tcurl_close($curl_handle);\n\n\t\tif ($parse)\n\t\t{\n\t\t\treturn $parsed_response;\n\t\t}\n\n\t\treturn $this->response;\n\t}\n"}},{"name":"set_body","parameters":{"parameter":{"name":"body","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Set the body to send in the request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$body","type":"string","required":"Required","description":"The textual content to send along in the body of the request."}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"333","endLine":"337","code":"\tpublic function set_body($body)\n\t{\n\t\t$this->request_body = $body;\n\t\treturn $this;\n\t}\n"}},{"name":"set_credentials","parameters":{"parameter":[{"name":"user","required":"true"},{"name":"pass","required":"true"}]},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Sets the credentials to use for authentication."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":[{"param":"$user","type":"string","required":"Required","description":"The username to authenticate with."},{"param":"$pass","type":"string","required":"Required","description":"The password to authenticate with."}]}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"233","endLine":"238","code":"\tpublic function set_credentials($user, $pass)\n\t{\n\t\t$this->username = $user;\n\t\t$this->password = $pass;\n\t\treturn $this;\n\t}\n"}},{"name":"set_curlopts","parameters":{"parameter":{"name":"curlopts","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Set additional CURLOPT settings. These will merge with the default settings, and override if there is a duplicate."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$curlopts","type":"array","required":"Optional","description":"A set of key-value pairs that set `CURLOPT` options. These will merge with the existing CURLOPTs, and ones passed here will override the defaults. Keys should be the `CURLOPT_` constants, not strings."}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"371","endLine":"375","code":"\tpublic function set_curlopts($curlopts)\n\t{\n\t\t$this->curlopts = $curlopts;\n\t\treturn $this;\n\t}\n"}},{"name":"set_method","parameters":{"parameter":{"name":"method","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Set the method type for the request."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$method","type":"string","required":"Required","description":"One of the following constants: <HTTP_GET>, <HTTP_POST>, <HTTP_PUT>, <HTTP_HEAD>, <HTTP_DELETE>."}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"295","endLine":"299","code":"\tpublic function set_method($method)\n\t{\n\t\t$this->method = strtoupper($method);\n\t\treturn $this;\n\t}\n"}},{"name":"set_proxy","parameters":{"parameter":{"name":"proxy","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Set the proxy to use for making requests."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$proxy","type":"string","required":"Optional","description":"The faux-url to use for proxy settings. Takes the following format: `proxy:\/\/user:pass@hostname:port`"}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"390","endLine":"398","code":"\tpublic function set_proxy($proxy)\n\t{\n\t\t$proxy = parse_url($proxy);\n\t\t$proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n\t\t$proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n\t\t$proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n\t\t$this->proxy = $proxy;\n\t\treturn $this;\n\t}\n"}},{"name":"set_request_url","parameters":{"parameter":{"name":"url","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Set the URL to make the request to."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$url","type":"string","required":"Required","description":"The URL to make the request to."}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"352","endLine":"356","code":"\tpublic function set_request_url($url)\n\t{\n\t\t$this->request_url = $url;\n\t\treturn $this;\n\t}\n"}},{"name":"set_useragent","parameters":{"parameter":{"name":"ua","required":"true"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Sets a custom useragent string for the class."},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$ua","type":"string","required":"Required","description":"The useragent string to use."}}},{"headline":"Returns","contents":{"line":"`$this`"}}]},"documented":"true","source":{"startLine":"314","endLine":"318","code":"\tpublic function set_useragent($ua)\n\t{\n\t\t$this->useragent = $ua;\n\t\treturn $this;\n\t}\n"}}]}}}