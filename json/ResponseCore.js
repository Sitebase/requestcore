{"class":{"name":"ResponseCore","fileData":{"docBlock":{"section":[{"headline":"File","contents":"Handles all linear and parallel HTTP requests using cURL and manages the responses."},{"headline":"Version","contents":{"line":"2010.03.21"}},{"headline":"Copyright","contents":{"line":"2006-2010 Ryan Parman, Foleeo Inc., and contributors."}},{"headline":"License","contents":{"entry":{"param":"Simplified BSD License","description":"http:\/\/opensource.org\/licenses\/bsd-license.php"}}}]}},"summary":{"file":"requestcore.class.php","docBlock":{"section":{"headline":"Class","contents":{"line":"Container for all response-related methods."}}}},"constants":{"@attributes":{"count":"0"}},"properties":{"@attributes":{"count":"3"},"property":[{"name":"body","access":"public","documented":"true","description":{"line":"Stores the SimpleXML response."}},{"name":"header","access":"public","documented":"true","description":{"line":"Stores the HTTP header information."}},{"name":"status","access":"public","documented":"true","description":{"line":"Stores the HTTP response code."}}]},"methods":{"@attributes":{"count":"2"},"method":[{"name":"__construct","parameters":{"parameter":[{"name":"header","required":"true"},{"name":"body","required":"true"},{"name":"status","required":"false","defaultValue":"null"}]},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"The constructor"},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":[{"param":"$header","type":"array","required":"Required","description":"Associative array of HTTP headers (typically returned by [get_response_header()](..\/requestcore\/get_response_header.html))."},{"param":"$body","type":"string","required":"Required","description":"XML-formatted response from AWS."},{"param":"$status","type":"integer","required":"Optional","description":"HTTP response status code from the request."}]}},{"headline":"Returns","contents":{"line":"_object_ Contains an _array_ `header` property (HTTP headers as an associative array), a _SimpleXMLElement_ or _string_ `body` property, and an _integer_ `status` code."}}]},"documented":"true","source":{"startLine":"759","endLine":"765","numberOfLines":"7","code":"public function __construct($header, $body, $status = null)\n{\n    $this-&gt;header = $header;\n    $this-&gt;body = $body;\n    $this-&gt;status = $status;\n    return $this;\n}\n"}},{"name":"isOK","parameters":{"parameter":{"name":"codes","required":"false","defaultValue":"array( 200, 201, 204 )"}},"access":"public","docBlock":{"section":[{"headline":"Method","contents":"Did we receive the status code we expected?"},{"headline":"Access","contents":{"line":"public"}},{"headline":"Parameters","contents":{"entry":{"param":"$codes","type":{"line":["integer","array"]},"required":"Optional","description":"The status code(s) to expect. Pass an _integer_ for a single acceptable value, or an _array_ of integers for multiple acceptable values. Defaults to _array_."}}},{"headline":"Returns","contents":{"line":"_boolean_ Whether we received the expected status code or not."}}]},"documented":"true","source":{"startLine":"780","endLine":"790","numberOfLines":"11","code":"public function isOK($codes = array(200, 201, 204))\n{\n    if (is_array($codes))\n    {\n        return in_array($this-&gt;status, $codes);\n    }\n    else\n    {\n        return ($this-&gt;status == $codes);\n    }\n}\n"},"examples":{"example":[{"title":"Successful response code should make isOK() return true.","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;send_request();\n\n$response = new ResponseCore(\n\t$http-&gt;get_response_header(),\n\t$http-&gt;get_response_body(),\n\t$http-&gt;get_response_code()\n);\n\nvar_dump($response-&gt;isOK());","result":"bool(true)"},{"title":"Invalid response code (e.g. 999) should make isOK() fail.","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;send_request();\n\n$response = new ResponseCore(\n\t$http-&gt;get_response_header(),\n\t$http-&gt;get_response_body(),\n\t999\n);\n\nvar_dump($response-&gt;isOK());","result":"bool(false)"},{"title":"Standard request with a standard (successful) response code.","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;set_method($http::HTTP_PUT);\n$response = $http-&gt;send_request(true);\n\nvar_dump($response-&gt;isOK());","result":"bool(true)"},{"title":"Test response code 200 explicitly, excluding other valid response codes.","code":"$http = new RequestCore('http:\/\/github.com\/skyzyx\/requestcore\/raw\/master\/_tests\/test_request.txt');\n$http-&gt;set_method($http::HTTP_PUT);\n$response = $http-&gt;send_request(true);\n\nvar_dump($response-&gt;isOK(200));","result":"bool(true)"}]}}]}}}